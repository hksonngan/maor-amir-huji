// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

	static Array twoToThe;
	

    /** Initializes the library. */
    function void init() {
		
		let twoToThe = Array.new(16);
		do Math.initTwoToTheArray();
		//do Math.printArray();
		return;
    }

	function void printArray()
	{
		var int index;
		var int number;
		let index =0;
		//do Output.moveCursor(1,1);
		do Output.printString("hellor1");
		while (index < 10)
		{
			
			let number = twoToThe[index];
			do Output.printString(number);
			do Output.println();
			let index = index + 1;
		}
		
		return;
	
	}
	
	
	/** Initialize the array of power of 2 multiplications */
	function void initTwoToTheArray(){
		
		var int index;
		let index = 1;
		let twoToThe[0] = 1;	
		while (index < 16)
		{
			let twoToThe[index] = twoToThe[index-1]+twoToThe[index-1];
			let index = index + 1;
		}
		return;
	}
	
	
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x > 0 | x=0)
		{
			return x;
		}
		else {
			return -x;
		}
    }

	/**  Returns true if the j-th bit of the integer x  is 1 and false otherwise */
	function boolean bit(int x , int j)
	{
		var int numFromArray;
		let numFromArray = twoToThe[j];
		
		if ((x & numFromArray) = numFromArray){
			return true;
		}
		else{
			return false;
		}
	}
	
	
    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int j,shiftedX,sum;
		var bool jBitOfY;
		let sum=0;
		let shiftedX = x;
		let j = 0;
		while (j < 16)
		{
			let jBitOfY = Math.bit(y,j);
			if (jBitOfY = true)
			{
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX+shiftedX;
			let j = j + 1;
		}
		return sum;
    }
	/** Returns the integer part of x/y where both are positive */
	function int calcDivide(int x,int y){
		var int q;
		
		//case y was overflow
		if (y<0){
			return 0;
		}
		
		if (y>x){
			return 0;
		}
		
		let q = Math.calcDivide(x,2*y);
		if ((x - (2*q*y)) < y){
			return 2*q;
		}
		else{
			return 2*q+1;
		}
		
	}
	
    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {	
		var boolean sign;
		var int absX,absY,result;
		
		//case y is zero
		if (y = 0){
			do Sys.error(3);
		}
		
		let absX = Math.abs(x);
		let absY = Math.abs(y);
		//decide on the sign of the result
		if (x<0){
			let absX = -absX;
			if (y>0){
				let sign = false;
			}
			else{
				let sign = true;
			}			
		}
		else{
			let absX = x;
			if (y<0){
				let sign = false;
			}
			else{
				let sign = true;
			}
		}
		let result= Math.calcDivide(absX,absY);
		if (sign){
			return result;
		}
		else {
			return -result;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y,index,tempNum,tempNumPow2;
		
		//case of negative input
		if (x < 0){
			do Sys.error(4);
		}
		
		let y=0;
		let index = 7;
		while (index > -1){
			let tempNum = y+twoToThe[index];
			let tempNumPow2 =Math.multiply(tempNum,tempNum);
			if (((tempNumPow2 < x) | (tempNumPow2 = x)) & (tempNumPow2 >0)){
				let y = tempNum;
			}
			let index = index - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
	if (a < b)
		{
			return b;
		}
	else {
			return a;
		 }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
	if (a < b)
		{
			return a;
		}
	else {
			return b;
		}	
    }
}
