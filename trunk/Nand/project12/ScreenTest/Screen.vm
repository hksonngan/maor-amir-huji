function Screen.init 0
push constant 0
not
pop static 1
push constant 16384
pop static 0
push constant 16
call Array.new 1
pop static 2
call Screen.initPowerOfTwoArray 0
pop temp 0
push constant 0
return
function Screen.clearScreen 1
push constant 16384
pop local 0
label WHILE_EXP0
push local 0
push constant 24576
lt
not
if-goto WHILE_END0
push local 0
push constant 0
call Memory.poke 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.initPowerOfTwoArray 1
push constant 1
pop local 0
push constant 0
push static 2
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 2
add
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
or
push constant 511
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 7
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 0
lt
push argument 1
or
push constant 255
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 7
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 1
push constant 32
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 15
and
pop local 1
push local 0
push static 0
add
pop pointer 1
push that 0
pop local 2
push static 1
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push static 0
add
push local 2
push local 1
push static 2
add
pop pointer 1
push that 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push local 0
push static 0
add
push local 2
push constant 0
not
push local 1
push static 2
add
pop pointer 1
push that 0
sub
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
push constant 0
return
function Screen.drawHorizontalLine 3
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 1
add
pop local 0
push argument 0
pop local 1
goto IF_END0
label IF_FALSE0
push argument 0
push constant 1
add
pop local 0
push argument 1
pop local 1
label IF_END0
label WHILE_EXP0
push local 1
push constant 15
and
push constant 0
eq
not
push local 1
push local 0
lt
and
not
if-goto WHILE_END0
push local 1
push argument 2
call Screen.drawPixel 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push argument 2
push constant 32
call Math.multiply 2
push local 1
push constant 16
call Math.divide 2
add
pop local 2
label WHILE_EXP1
push local 1
push local 0
push constant 16
sub
lt
not
if-goto WHILE_END1
push static 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push static 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END1
label IF_FALSE1
push local 2
push static 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END1
push local 2
push constant 1
add
pop local 2
push local 1
push constant 16
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push local 1
push local 0
lt
not
if-goto WHILE_END2
push local 1
push argument 2
call Screen.drawPixel 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push constant 0
return
function Screen.drawVerticalLine 2
push argument 1
push argument 2
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push constant 1
add
pop local 0
push argument 1
pop local 1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 1
add
pop local 0
push argument 2
pop local 1
label IF_END0
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push argument 0
push local 1
call Screen.drawPixel 2
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 11
push argument 0
push constant 0
lt
push argument 0
or
push constant 511
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 2
push constant 0
lt
push argument 2
or
push constant 511
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 1
push constant 0
lt
push argument 1
or
push constant 255
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE2
push argument 3
push constant 0
lt
push argument 3
or
push constant 255
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE3
push argument 0
push argument 2
eq
push argument 1
and
push argument 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE4
push constant 0
pop local 10
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
call Math.abs 1
pop local 2
push local 1
call Math.abs 1
pop local 3
push local 0
push constant 0
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 0
push argument 1
push argument 3
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label IF_FALSE5
push local 1
push constant 0
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontalLine 3
pop temp 0
label IF_FALSE6
push local 0
push constant 0
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 1
pop local 8
goto IF_END7
label IF_FALSE7
push constant 1
neg
pop local 8
label IF_END7
push local 1
push constant 0
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 1
pop local 9
goto IF_END8
label IF_FALSE8
push constant 1
neg
pop local 9
label IF_END8
push constant 0
pop local 4
push constant 0
pop local 6
push constant 0
pop local 5
push constant 0
pop local 7
label WHILE_EXP0
push local 6
push local 2
gt
not
push local 7
push local 3
gt
not
and
not
if-goto WHILE_END0
push argument 0
push local 4
add
push argument 1
push local 5
add
call Screen.drawPixel 2
pop temp 0
push local 10
push constant 0
lt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 4
push local 8
add
pop local 4
push local 4
call Math.abs 1
pop local 6
push local 10
push local 3
add
pop local 10
goto IF_END9
label IF_FALSE9
push local 5
push local 9
add
pop local 5
push local 5
call Math.abs 1
pop local 7
push local 10
push local 2
sub
pop local 10
label IF_END9
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 2
push argument 0
push constant 0
lt
push argument 0
or
push constant 511
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 2
push constant 0
lt
push argument 2
or
push constant 511
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 1
push constant 0
lt
push argument 1
or
push constant 255
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE2
push argument 3
push constant 0
lt
push argument 3
or
push constant 255
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE3
push argument 0
push argument 2
eq
push argument 1
and
push argument 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE4
push argument 1
push argument 3
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 3
push constant 1
add
pop local 0
push argument 1
pop local 1
goto IF_END5
label IF_FALSE5
push argument 1
push constant 1
add
pop local 0
push argument 3
pop local 1
label IF_END5
label WHILE_EXP0
push local 1
push local 0
lt
not
if-goto WHILE_END0
push argument 0
push argument 2
push local 1
call Screen.drawHorizontalLine 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 0
push constant 0
lt
push argument 0
or
push constant 511
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 12
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 0
lt
push argument 1
or
push constant 255
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 12
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 2
push constant 0
lt
push argument 2
or
push constant 181
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 13
call Sys.error 1
pop temp 0
push constant 0
return
label IF_FALSE2
push argument 2
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE3
push argument 2
neg
pop local 0
push argument 2
push constant 1
add
pop local 1
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push argument 2
push argument 2
call Math.multiply 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 2
push argument 0
push local 2
sub
push argument 0
push local 2
add
push argument 1
push local 0
add
call Screen.drawHorizontalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
