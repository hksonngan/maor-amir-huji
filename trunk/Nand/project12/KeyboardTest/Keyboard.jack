// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	
    static int keyboardAddress;
	

    /** Initializes the keyboard. */
    function void init() {
	return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, and the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
	return Memory.peek(24576);
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
	var char currentChar;
	var char keyPressedVar;
	do Output.printChar(0);
	let currentChar = 0;
	let keyPressedVar = 0;
	while ((keyPressedVar > 0) | (currentChar = 0)){
		let keyPressedVar = Keyboard.keyPressed();
		if (keyPressedVar > 0){
			let currentChar = keyPressedVar;
		}
	}
	
	do Output.backSpace();
	do Output.printChar(currentChar);
	return currentChar;
	
    }

    /**								
     * prints the message on the screen and then reads the next line
     * (until a newline character) from the keyboard and returns its value.
     */
    function String readLine(String message) {
		var String inputStr;
		var char newLine,backSpace;
		var char currentChar;
		
		let inputStr = String.new(80);
		let newLine = String.newLine();
		let backSpace = String.backSpace();
		
		do Output.printString(message);
		let currentChar = Keyboard.readChar();
		while (~(currentChar = newLine)){
			if (currentChar = backSpace){
				do inputStr.eraseLastChar();
			}
			else{
				do inputStr.appendChar(currentChar);
				}
			let currentChar = Keyboard.readChar();
		}
		return inputStr;
    }   

    /**								
     * prints the message on the screen and then reads the next line
     * (until a newline character) from the keyboard and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
		var String inputStr;
		var int retInt;
		let inputStr = Keyboard.readLine(message);
		let retInt = inputStr.intValue();
		do inputStr.dispose();
		return retInt;
		
    }
}
