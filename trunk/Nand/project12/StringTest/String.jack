// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/String.jack

/**
 * The String type.
 */
class String {

	field Array str;	
	field int strMaxLength;
	field int length;

    /** Constructs a new empty String with a maximum length of
     *  maxLength. */
    constructor String new(int maxLength) {
		if (maxLength<0){
			do Sys.error(14);
		}
		else{
			if (maxLength > 0){
			let str = Array.new(maxLength);
			}
			let length = 0;
			let strMaxLength = maxLength;
		}
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (strMaxLength > 0){
		do str.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		//case the index is out of bounds
		if (j < 0 | j > length | j=length){
			do Sys.error(15);
		}
		return str[j];
		
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		//case the index is out of bounds
		if (j < 0 | j > length | j=length){
			do Sys.error(15);
		}
		let str[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		//case string is full
		if (length = strMaxLength){
			do Sys.error(17);
			return str;
		}
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		//case the string is empty
		if (length = 0){
			do Sys.error(18);
		}
		let str[length-1]=0;
		let length = length - 1;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int value,index;
		var boolean sign;
		
		//check the sign
		if (str[0] = 45){
			let sign = false;
			let index = 1;
		}
		else{
			let sign = true;
			let index = 0;
		}
		
		while (index < length){
			let value = (value*10) + str[index]-48;
			let index = index + 1;
		}
		if (sign){
			return value;	
		}
		else{
			return -value;
		}
    }
	
	/** given a positive number returns a the string representation of it */
	function String int2String(int number){
		var int lastDigit;
		var String currentDigit,otherDigits;
		var int temp;
		let temp = 10*Math.divide(number,10);
		let lastDigit = number - temp + 48;
		if (number < 10){
			let currentDigit = String.new(16);
			do currentDigit.appendChar(lastDigit);
			return currentDigit;
		}
		else{
			let otherDigits = String.int2String(Math.divide(number,10));
			return otherDigits.appendChar(lastDigit);
		}
	
	}
	
	
    /** Sets this String to hold a representation of the given
     *  number. */
    method void setInt(int number) {
		
		var int indexOfStrFromInt,absNum,intLen;
		var String strFromInt;
		
		//assuming that the string should have enough room for the integer,
		//the only thing remains to check is that the string is not empty
		if (strMaxLength = 0){
			do Sys.error();
		}
		
		//clearing the string
		let length = 0;
		
		
		//check if the number is negative
		if (number < 0){
			do appendChar(45);		
		}
		
		let absNum = Math.abs(number);
		let strFromInt = String.int2String(absNum);
		let intLen = strFromInt.length();
		let indexOfStrFromInt = 0;
		while (indexOfStrFromInt < intLen){
			do appendChar(strFromInt.charAt(indexOfStrFromInt));
			let indexOfStrFromInt = indexOfStrFromInt + 1;
		}
		do strFromInt.dispose();
		return ;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
	

	
	
}
