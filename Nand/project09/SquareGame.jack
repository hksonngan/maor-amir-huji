// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/09/Square/SquareGame.jack

/**
 * The SquareDance class implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beggining, the square is located at the top left corner.
 * Use the arrow keys to move the square.
 * Use 'z' & 'x' to decrement & increment the size.
 * Use 'q' to quit.
 */
class SquareGame {

	field int counter;
	field int secCounter;
	field int playerXPos;
	field Piece movingPlayer;
	field Board b;
	
    
	/** Constructs a new Square Game. */
    constructor SquareGame new() {
		let b = Board.new();
		let playerXPos = 6;
        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        //do square.dispose();
        do Memory.deAlloc(this);
        return;
    }
	

    /** Starts the game. Handles inputs from the user that controls
     *  the square movement direction and size. */
    method void run() {
        var char key;
        var boolean exit;		
		var Piece p;	
		
		var int counter;
		
		
        let exit = false;
	
		
		
		let counter = 0;
		
		let secCounter = 0;
		
		do SquareGame.drawGrid();
		do drawScoreBoard();
		let p = Piece.new(false,false);
		let movingPlayer = Piece.new(false,true);
		do p.drawPiece(0,0);
		do movingPlayer.drawPiece(playerXPos,0);
        while (~exit) {
            // waits for a key to be pressed.		
           // while (key = 0) {
                let key = Keyboard.keyPressed();

            if (key = 81) {
                let exit = true;
				
            }
			if (key = 32) {
				let counter = counter + 1;
				if (counter = 10)
				{
					let counter = 0;
					do Output.printString("SCHUNA");
				}
				else{
				do Output.printString("WTF");
				}
				do Output.println();
				if (b.putPlayer(playerXPos))
				{
					do movingPlayer.changeType();
				}
				
			}
			
			
            if (key = 130) {
				// do Output.printInt(3);
				if (~(playerXPos = 0))
			{
				do movingPlayer.movePiece(playerXPos-1,0);
				let playerXPos = playerXPos-1;
			}
            }
            if (key = 132) {
				if (~(playerXPos = 6))
		   {
				do movingPlayer.movePiece(playerXPos+1,0);
				let playerXPos = playerXPos+1;
			}
            }
			while (~(key = 0))
			{
				let key = Keyboard.keyPressed();
			}
        }
		
        return;
	}
	
	
	function void drawGrid()
	{
		var int y_offset;
		var int x_offset;
		var int i;
		let i = 0;
		let y_offset = 27;
		let x_offset = 256+28;
		
		while(i<7)
		{
			do Screen.drawLine(256+28, ((i*28) + y_offset), 480 ,  (i*28) + y_offset);
			let i = i + 1;
			
		}
		
		do Output.printString("ver");
		do Output.println();
		let i =0;
		
		while(i<8)
		{
			do Screen.drawLine(( x_offset + (i*28)) , y_offset ,(x_offset+(i*28)) , 223-56 + y_offset);
			let i = i + 1;
		}
		
		return;
	}
	
	method void drawScoreBoard()
	{
		do Output.moveCursor(2,2);
		do Output.printString("Play our 4-in-a-row game!");
		do Output.println();
		
		do Output.printString("  - - - - - - - - - - - - -");
		
		return;
	}
	
}


